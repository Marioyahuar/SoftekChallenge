service: star-wars-pokemon-api

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  timeout: 30
  memorySize: 512
  environment:
    STAGE: ${self:provider.stage}
    DB_HOST: starwars-pokemon-db.cjiw6sowo02v.us-east-2.rds.amazonaws.com
    DB_NAME: starwars_pokemon
    DB_USER: admin
    DB_PASSWORD: ServerlessDeploy1
    DB_PORT: "3306"
    REDIS_HOST: starwars-pokemon-redis.lt0ey8.ng.0001.use2.cache.amazonaws.com
    REDIS_PORT: "6379"
    SWAPI_BASE_URL: "https://swapi.info/api/"
    POKEAPI_BASE_URL: "https://pokeapi.co/api/v2"
    COGNITO_USER_POOL_ID: us-east-2_WMoVpxe1F
    CACHE_TTL_MINUTES: "30"
    API_RATE_LIMIT_RPM: "60"
    LOG_LEVEL: "debug"
    ADMIN_USER_IDS: f19be580-9021-7005-c0d2-209049612fe2
    COGNITO_CLIENT_ID: 14qjcibk8s5ma1lv94sciqjgu9
  tracing:
    lambda: true
    apiGateway: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:GetUser
          Resource:
            - "arn:aws:cognito-idp:us-east-2:*:userpool/us-east-2_WMoVpxe1F"
  httpApi:
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-2.amazonaws.com/us-east-2_WMoVpxe1F
        audience:
          - 14qjcibk8s5ma1lv94sciqjgu9

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  dotenv:
    path: .env
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0
    useChildProcesses: true

functions:
  fusedData:
    handler: src/infrastructure/adapters/http/handlers/fusedDataHandler.handler
    description: "Get fused Star Wars and Pokemon data with intelligent matching"
    events:
      - httpApi:
          path: /fusionados
          method: get
          cors:
            allowOrigins:
              - "*"
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowMethods:
              - GET
              - OPTIONS

  customData:
    handler: src/infrastructure/adapters/http/handlers/customDataHandler.handler
    description: "Store custom user data with authentication"
    events:
      - httpApi:
          path: /almacenar
          method: post
          authorizer: cognitoAuthorizer
          cors:
            allowOrigins:
              - "*"
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowMethods:
              - POST
              - OPTIONS

  history:
    handler: src/infrastructure/adapters/http/handlers/historyHandler.handler
    description: "Get paginated fusion history with authentication"
    events:
      - httpApi:
          path: /historial
          method: get
          authorizer: cognitoAuthorizer
          cors:
            allowOrigins:
              - "*"
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowMethods:
              - GET
              - OPTIONS

resources:
  Resources:
    # CloudWatch Log Groups
    FusedDataLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-fusedData
        RetentionInDays: 14

    CustomDataLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-customData
        RetentionInDays: 14

    HistoryLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-history
        RetentionInDays: 14

    # API Gateway Configuration
    HttpApiGateway:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-${self:provider.stage}
        ProtocolType: HTTP
        CorsConfiguration:
          AllowOrigins:
            - "*"
          AllowHeaders:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
          AllowMethods:
            - GET
            - POST
            - OPTIONS
          MaxAge: 86400

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: HttpApiGateway
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId

    ApiEndpoint:
      Description: API Gateway endpoint URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: HttpApiGateway
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiEndpoint
